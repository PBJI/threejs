import * as THREE from "https://esm.sh/three@0.160.0";
import { GLTFLoader } from "https://esm.sh/three@0.160.0/examples/jsm/loaders/GLTFLoader.js";
import { OrbitControls } from "https://esm.sh/three@0.160.0/examples/jsm/controls/OrbitControls.js";

//Adding Scene, camera,renderer
const scene = new THREE.Scene();

scene.background = new THREE.Color(0x1e1e1e);
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

//Adding Lights
const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1)
scene.add(hemiLight)

const dirLight = new THREE.DirectionalLight(0xffffff, 10)
dirLight.position.set(2.5, 5, 7.5)
scene.add(dirLight)


const partsOfCar=[]

//loading car model
const loader = new GLTFLoader();
loader.load('./car.glb',(gltf)=>{

	const model=gltf.scene;
	model.scale.set(1,1,1);
	
	//traversing and storing inner meshes from the gltf model 
	model.traverse((child)=>{
    if(child.isMesh){
      const original = child.position.clone();
			const distance = original.distanceTo(center);
			partsOfCar.push({})
		}
	})

	scene.add(model)
},undefined,(error)=>{console.log("an err occuerd",error)})

//orbit controls for moving around
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; 
controls.dampingFactor = 0.05; 
controls.enablePan = false;    

//Animating loop
function animate() {
  requestAnimationFrame(animate);
	controls.update();
  renderer.render(scene, camera);
}

animate();
